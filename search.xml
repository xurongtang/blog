<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Gallery-1</title>
    <url>/2024/04/08/Gallery-1/</url>
    <content><![CDATA[<center>2024-03-23于长安大学彩虹桥</center>
<img src="/2024/04/08/Gallery-1/IMG_0504.jpg" class="">

<hr>
<center>2024-03-23于长安大学家属住宅区</center>
<img src="/2024/04/08/Gallery-1/IMG_0515.jpg" class="">

<hr>
<center>2024-01-13于大兴善寺</center>
<img src="/2024/04/08/Gallery-1/IMG_3455.jpg" class="">

<hr>
<center>2024-05-21于西安金沙国际</center>
<img src="/2024/04/08/Gallery-1/IMG_7442.jpg" class="">

<hr>
<center>2024-05-21于西安海港城</center>
<img src="/2024/04/08/Gallery-1/IMG_7444.jpg" class="">

<hr>
<center>2024-05-21于西安赛格</center>
<img src="/2024/04/08/Gallery-1/IMG_7445.jpg" class="">
]]></content>
      <categories>
        <category>Photos_Library</category>
      </categories>
      <tags>
        <tag>photos</tag>
      </tags>
  </entry>
  <entry>
    <title>Scientific style line chart drawing</title>
    <url>/2024/04/08/Line-chart-polt/</url>
    <content><![CDATA[<h1 id="科研风格折线图绘制"><a href="#科研风格折线图绘制" class="headerlink" title="科研风格折线图绘制"></a>科研风格折线图绘制</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> AutoMinorLocator</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.axes_grid1.inset_locator <span class="keyword">import</span> inset_axes,mark_inset</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimSun&#x27;</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">ax1,ax2</span>):</span><br><span class="line">    <span class="comment"># 获得当前脚本路径</span></span><br><span class="line">    fill_color = <span class="string">&#x27;#888888&#x27;</span></span><br><span class="line">    legend_font = &#123;<span class="string">&quot;family&quot;</span> : <span class="string">&quot;Times New Roman&quot;</span>,<span class="string">&quot;size&quot;</span>: <span class="number">12</span>&#125;</span><br><span class="line">    curPath = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line">    <span class="comment"># 切换路径</span></span><br><span class="line">    os.chdir(curPath)</span><br><span class="line">    <span class="comment"># 数据读入（用户自定义）</span></span><br><span class="line">    data1 = np.load(<span class="string">&#x27;data1.npy&#x27;</span>).flatten()</span><br><span class="line">    data2 = np.load(<span class="string">&#x27;data2.npy&#x27;</span>).flatten()</span><br><span class="line">    data3 = np.load(<span class="string">&#x27;data3.npy&#x27;</span>).flatten()</span><br><span class="line">    TRUE_data = np.load(<span class="string">&#x27;true.npy&#x27;</span>).flatten()</span><br><span class="line"></span><br><span class="line">    ax = [ax1,ax2]</span><br><span class="line">    <span class="comment"># ax[0].plot(GRU_data,label=&#x27;GRU&#x27;,marker=&#x27;x&#x27;,linestyle=&#x27;--&#x27;,linewidth=2,markersize=3)</span></span><br><span class="line">    ax[<span class="number">0</span>].plot(data1+<span class="number">0.11</span>,c=<span class="string">&#x27;m&#x27;</span>, label=<span class="string">&#x27;Model1&#x27;</span>,marker=<span class="string">&#x27;d&#x27;</span>,linewidth=<span class="number">2</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    ax[<span class="number">0</span>].plot(data2+<span class="number">0.11</span>,c=<span class="string">&#x27;navy&#x27;</span>, label=<span class="string">&#x27;Model2&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>,linewidth=<span class="number">2</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    ax[<span class="number">0</span>].plot(data3+<span class="number">0.11</span>,c=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;Model3&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,linewidth=<span class="number">2</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    ax[<span class="number">0</span>].plot(TRUE_data+<span class="number">0.11</span>,c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;TRUE&#x27;</span>,linewidth=<span class="number">2</span>,marker=<span class="string">&#x27;^&#x27;</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    ax[<span class="number">0</span>].fill_between([<span class="number">25</span>,<span class="number">38</span>],<span class="number">1.4</span>,<span class="number">1.6</span>,facecolor = fill_color, alpha = <span class="number">0.8</span>)</span><br><span class="line">    fill0 = ax[<span class="number">0</span>].fill_between([<span class="number">52</span>,<span class="number">64</span>],<span class="number">1.65</span>,<span class="number">1.82</span>,facecolor = fill_color, alpha = <span class="number">0.8</span>,label=<span class="string">&#x27;Area&#x27;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].xaxis.set_ticks_position(<span class="string">&#x27;both&#x27;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].yaxis.set_ticks_position(<span class="string">&#x27;both&#x27;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].yaxis.set_minor_locator(AutoMinorLocator(<span class="number">10</span>))</span><br><span class="line">    ax[<span class="number">0</span>].tick_params(<span class="string">&#x27;y&#x27;</span>,which=<span class="string">&#x27;minor&#x27;</span>,direction=<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].xaxis.set_minor_locator(AutoMinorLocator(<span class="number">10</span>))</span><br><span class="line">    ax[<span class="number">0</span>].tick_params(<span class="string">&#x27;x&#x27;</span>,which=<span class="string">&#x27;minor&#x27;</span>,direction=<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line">    ax[<span class="number">0</span>].tick_params(which = <span class="string">&quot;major&quot;</span>,</span><br><span class="line">               length = <span class="number">4</span>, width = <span class="number">1.8</span>,labelsize=<span class="number">10</span>)</span><br><span class="line">    ax[<span class="number">0</span>].tick_params(which = <span class="string">&quot;minor&quot;</span>,width = <span class="number">1.4</span>)</span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> ax[<span class="number">0</span>].get_yticklabels():</span><br><span class="line">        label.set_fontproperties(<span class="string">&#x27;Times New Roman&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> ax[<span class="number">0</span>].get_xticklabels():</span><br><span class="line">        label.set_fontproperties(<span class="string">&#x27;Times New Roman&#x27;</span>)</span><br><span class="line">    legend0 = ax[<span class="number">0</span>].legend(loc=<span class="string">&#x27;upper left&#x27;</span>,prop=legend_font, title=<span class="string">&#x27;Legend_Title&#x27;</span>)</span><br><span class="line">    legend0.get_title().set_fontproperties(<span class="string">&#x27;Times New Roman&#x27;</span>)</span><br><span class="line">    legend0.get_title().set_fontsize(fontsize = <span class="number">14</span>)</span><br><span class="line">    <span class="comment"># 子图</span></span><br><span class="line">    axins = inset_axes(ax[<span class="number">0</span>], width=<span class="string">&quot;50%&quot;</span>, height=<span class="string">&quot;55%&quot;</span>,bbox_to_anchor=(<span class="number">0.4</span>, -<span class="number">0.24</span>, <span class="number">0.6</span>, <span class="number">0.8</span>), bbox_transform=ax[<span class="number">0</span>].transAxes)</span><br><span class="line">    axins.set_facecolor(<span class="string">&#x27;#DDDDDD&#x27;</span>)</span><br><span class="line">    axins.plot(data1+<span class="number">0.11</span>,c=<span class="string">&#x27;m&#x27;</span>, label=<span class="string">&#x27;Model1&#x27;</span>,marker=<span class="string">&#x27;d&#x27;</span>,linewidth=<span class="number">2</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    axins.plot(data2+<span class="number">0.11</span>,c=<span class="string">&#x27;navy&#x27;</span>, label=<span class="string">&#x27;Model2&#x27;</span>,marker=<span class="string">&#x27;s&#x27;</span>,linewidth=<span class="number">2</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    axins.plot(data3+<span class="number">0.11</span>,c=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;Model3&#x27;</span>,marker=<span class="string">&#x27;o&#x27;</span>,linewidth=<span class="number">2</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    axins.plot(TRUE_data+<span class="number">0.11</span>,c=<span class="string">&#x27;red&#x27;</span>, label=<span class="string">&#x27;TRUE&#x27;</span>,linewidth=<span class="number">2</span>,marker=<span class="string">&#x27;^&#x27;</span>,markersize=<span class="number">3</span>)</span><br><span class="line">    axins.set_xlim(<span class="number">25</span>,<span class="number">38</span>)</span><br><span class="line">    axins.set_ylim(<span class="number">1.4</span>,<span class="number">1.6</span>)</span><br><span class="line">    axins.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">    axins.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">    axins.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">    axins.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">    axins.tick_params(labelbottom=<span class="literal">False</span>, labelleft=<span class="literal">False</span>,bottom=<span class="literal">False</span>,left=<span class="literal">False</span>)</span><br><span class="line">    mark_inset(ax[<span class="number">0</span>], axins, loc1=<span class="number">3</span>, loc2=<span class="number">1</span>, fc=<span class="string">&quot;none&quot;</span>, ec=<span class="string">&#x27;k&#x27;</span>, lw=<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 设置图例标题</span></span><br><span class="line">    ax[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;预测值(m)&#x27;</span>,fontweight=<span class="string">&#x27;bold&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    ax[<span class="number">1</span>].set_ylabel(<span class="string">&#x27;残差(m)&#x27;</span>,fontweight=<span class="string">&#x27;bold&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">    title0 = ax[<span class="number">0</span>].set_title(<span class="string">&#x27;(a)&#x27;</span>,fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, y=<span class="number">0</span>, loc=<span class="string">&#x27;right&#x27;</span>, color=<span class="string">&#x27;#550088&#x27;</span>)</span><br><span class="line">    title1 = ax[<span class="number">1</span>].set_title(<span class="string">&#x27;(b)&#x27;</span>,fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>, y=<span class="number">0</span>, loc=<span class="string">&#x27;left&#x27;</span>, color=<span class="string">&#x27;#550088&#x27;</span>)</span><br><span class="line">    title0.set_fontsize(fontsize = <span class="number">18</span>)</span><br><span class="line">    title1.set_fontsize(fontsize = <span class="number">18</span>)</span><br><span class="line">    title0.set_fontweight(<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">    title1.set_fontweight(<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ax[<span class="number">1</span>].axhline(y=<span class="number">0</span>, color=<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(TRUE_data-data1, c=<span class="string">&#x27;m&#x27;</span>, label=<span class="string">&#x27;Model1&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(TRUE_data-data2, c=<span class="string">&#x27;navy&#x27;</span>, label=<span class="string">&#x27;Model2&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">    ax[<span class="number">1</span>].plot(TRUE_data-data3, c=<span class="string">&#x27;g&#x27;</span>, label=<span class="string">&#x27;Model3&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 绘制y=0</span></span><br><span class="line">    <span class="comment"># 填充</span></span><br><span class="line">    ax[<span class="number">1</span>].fill_between([<span class="number">25</span>,<span class="number">38</span>],-<span class="number">0.02</span>,<span class="number">0.065</span>,facecolor = fill_color, alpha = <span class="number">0.8</span>)</span><br><span class="line">    fill1 = ax[<span class="number">1</span>].fill_between([<span class="number">52</span>,<span class="number">64</span>],-<span class="number">0.02</span>,<span class="number">0.065</span>,facecolor = fill_color, alpha=<span class="number">0.8</span>,label=<span class="string">&#x27;Area&#x27;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].xaxis.set_ticks_position(<span class="string">&#x27;both&#x27;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].yaxis.set_ticks_position(<span class="string">&#x27;both&#x27;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].yaxis.set_minor_locator(AutoMinorLocator(<span class="number">10</span>))</span><br><span class="line">    ax[<span class="number">1</span>].tick_params(<span class="string">&#x27;y&#x27;</span>,which=<span class="string">&#x27;minor&#x27;</span>,direction=<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].xaxis.set_minor_locator(AutoMinorLocator(<span class="number">10</span>))</span><br><span class="line">    ax[<span class="number">1</span>].tick_params(<span class="string">&#x27;x&#x27;</span>,which=<span class="string">&#x27;minor&#x27;</span>,direction=<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line">    ax[<span class="number">1</span>].tick_params(which = <span class="string">&quot;major&quot;</span>,</span><br><span class="line">               length = <span class="number">4</span>, width = <span class="number">1.8</span>,labelsize=<span class="number">10</span>)</span><br><span class="line">    ax[<span class="number">1</span>].tick_params(which = <span class="string">&quot;minor&quot;</span>,width = <span class="number">1.4</span>)</span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> ax[<span class="number">1</span>].get_yticklabels():</span><br><span class="line">        label.set_fontproperties(<span class="string">&#x27;Times New Roman&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> ax[<span class="number">1</span>].get_xticklabels():</span><br><span class="line">        label.set_fontproperties(<span class="string">&#x27;Times New Roman&#x27;</span>)</span><br><span class="line">    legend1 = ax[<span class="number">1</span>].legend(loc=<span class="string">&#x27;upper left&#x27;</span>,prop=legend_font,title=<span class="string">&#x27;Legend_Title&#x27;</span>)</span><br><span class="line">    legend1.get_title().set_fontproperties(<span class="string">&#x27;Times New Roman&#x27;</span>)</span><br><span class="line">    legend1.get_title().set_fontsize(fontsize = <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ax_ <span class="keyword">in</span> [ax[<span class="number">0</span>],ax[<span class="number">1</span>]]:</span><br><span class="line">        <span class="comment"># ax_.set_facecolor(&#x27;#EEEEEE&#x27;)</span></span><br><span class="line">        ax_.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">        ax_.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">        ax_.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">        ax_.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">        ax_.grid(linestyle=<span class="string">&#x27;--&#x27;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">        ax_.tick_params(top=<span class="literal">True</span>,right=<span class="literal">True</span>,direction=<span class="string">&#x27;in&#x27;</span>, labelsize=<span class="number">15</span>)</span><br><span class="line">        ax_.set_xlabel(<span class="string">&#x27;时间步长&#x27;</span>,fontweight=<span class="string">&#x27;bold&#x27;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">    fig.tight_layout()</span><br><span class="line">    fig.savefig(<span class="string">&#x27;res.png&#x27;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> ax[<span class="number">0</span>],ax[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fig,ax = plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">15</span>,<span class="number">6</span>))</span><br><span class="line">    main(ax[<span class="number">0</span>],ax[<span class="number">1</span>])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><img src="/2024/04/08/Line-chart-polt/res.png" class="">]]></content>
      <categories>
        <category>Python_Plot</category>
      </categories>
      <tags>
        <tag>line-chart</tag>
      </tags>
  </entry>
  <entry>
    <title>Scientific style bar chart drawing</title>
    <url>/2024/04/08/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E7%9B%B4%E6%96%B9%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="科研风条形图"><a href="#科研风条形图" class="headerlink" title="科研风条形图"></a>科研风条形图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> AutoMinorLocator,MultipleLocator,FuncFormatter</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimSun&#x27;</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">data_1 = np.load(<span class="string">&#x27;LSTM_HF05-0.5day.npy&#x27;</span>).flatten()</span><br><span class="line">data_2 = np.load(<span class="string">&#x27;preds_HF05_7_1_MALinear_1_MSE.npy&#x27;</span>).flatten()</span><br><span class="line">data_3 = np.load(<span class="string">&#x27;preds_HF05_7_1_NLinear_MSE.npy&#x27;</span>).flatten()</span><br><span class="line">TRUE_data = np.load(<span class="string">&#x27;trues_HF05_7_1_MALinear_1_MSE.npy&#x27;</span>).flatten()</span><br><span class="line"></span><br><span class="line">data1 = TRUE_data - data_1</span><br><span class="line">data2 = TRUE_data - data_2</span><br><span class="line">data3 = TRUE_data - data_3</span><br><span class="line"></span><br><span class="line">boundary1 = <span class="number">24</span></span><br><span class="line">boundary2 = <span class="number">39</span></span><br><span class="line"></span><br><span class="line">data1 = data1[boundary1:boundary2]</span><br><span class="line">data2 = data2[boundary1:boundary2]</span><br><span class="line">data3 = data3[boundary1:boundary2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱状图绘制</span></span><br><span class="line">fig,ax = plt.subplots(<span class="number">1</span>,<span class="number">1</span>,figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">width = <span class="number">0.25</span></span><br><span class="line">ax.bar(np.arange(<span class="built_in">len</span>(data1))-width, np.<span class="built_in">abs</span>(data1), edgecolor=<span class="string">&#x27;k&#x27;</span>,label=<span class="string">&#x27;Model1&#x27;</span>, color=<span class="string">&#x27;grey&#x27;</span>,width=width)</span><br><span class="line">ax.bar(np.arange(<span class="built_in">len</span>(data3)), np.<span class="built_in">abs</span>(data3), edgecolor=<span class="string">&#x27;k&#x27;</span>,label=<span class="string">&#x27;Model2&#x27;</span>, color=<span class="string">&#x27;silver&#x27;</span>,width=width)</span><br><span class="line">ax.bar(np.arange(<span class="built_in">len</span>(data2))+width, np.<span class="built_in">abs</span>(data2),edgecolor=<span class="string">&#x27;k&#x27;</span>,label=<span class="string">&#x27;Model3&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>,width=width)</span><br><span class="line">ax.set_xticks(np.arange(<span class="built_in">len</span>(data1)),[<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(boundary1,boundary2)],fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>,fontweight=<span class="string">&#x27;bold&#x27;</span>,fontsize=<span class="number">16</span>)</span><br><span class="line">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="number">4</span>))     <span class="comment"># 次刻度</span></span><br><span class="line">ax.tick_params(<span class="string">&#x27;y&#x27;</span>,which=<span class="string">&#x27;minor&#x27;</span>,direction=<span class="string">&#x27;in&#x27;</span>)     <span class="comment"># 设置次刻度</span></span><br><span class="line">plt.yticks(fontproperties = <span class="string">&#x27;Times New Roman&#x27;</span>, size = <span class="number">14</span>)   <span class="comment"># 设置y轴测度</span></span><br><span class="line">ax.tick_params(top=<span class="literal">True</span>, right=<span class="literal">True</span>,direction=<span class="string">&#x27;in&#x27;</span>)</span><br><span class="line">legend_font = &#123;<span class="string">&quot;family&quot;</span> : <span class="string">&quot;Times New Roman&quot;</span>,<span class="string">&quot;size&quot;</span>: <span class="number">14</span>&#125;     <span class="comment"># 设置legend字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;ytick.direction&#x27;</span>] = <span class="string">&#x27;in&#x27;</span></span><br><span class="line">ax.legend(prop=legend_font, loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;残差绝对值(m)&#x27;</span>,fontweight=<span class="string">&#x27;bold&#x27;</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;时间步长&#x27;</span>,fontweight=<span class="string">&#x27;bold&#x27;</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_linewidth(<span class="number">1.7</span>)</span><br><span class="line">xmax = np.<span class="built_in">max</span>(np.<span class="built_in">abs</span>(ax.get_xlim()))</span><br><span class="line">ax.text(xmax-<span class="number">0.5</span>,<span class="number">0.002</span>,<span class="string">&quot;(a)&quot;</span>,fontsize = <span class="number">18</span>,color = <span class="string">&quot;#550088&quot;</span>,fontproperties=<span class="string">&#x27;Times New Roman&#x27;</span>,fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">fig.savefig(<span class="string">&#x27;res.png&#x27;</span>, dpi=<span class="number">600</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><img src="/2024/04/08/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E7%9B%B4%E6%96%B9%E5%9B%BE/res.png" class="">
]]></content>
      <categories>
        <category>Python_Plot</category>
      </categories>
      <tags>
        <tag>bar-chart</tag>
      </tags>
  </entry>
  <entry>
    <title>The Introduction to Basic Concepts of Reinforcement Learning</title>
    <url>/2024/04/16/RL%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><h1 id="Reinforcement-Learning"><a href="#Reinforcement-Learning" class="headerlink" title="Reinforcement Learning"></a>Reinforcement Learning</h1><h1 id="A-Classic-Example"><a href="#A-Classic-Example" class="headerlink" title="A Classic Example"></a>A Classic Example</h1><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><h1 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h1><h1 id="State-Transition"><a href="#State-Transition" class="headerlink" title="State Transition"></a>State Transition</h1><h1 id="Policy"><a href="#Policy" class="headerlink" title="Policy"></a>Policy</h1><h1 id="Reward"><a href="#Reward" class="headerlink" title="Reward"></a>Reward</h1><h1 id="Trajectories"><a href="#Trajectories" class="headerlink" title="Trajectories"></a>Trajectories</h1><h1 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h1><h1 id="Markov-Decision-Process-MDP"><a href="#Markov-Decision-Process-MDP" class="headerlink" title="Markov Decision Process(MDP)"></a>Markov Decision Process(MDP)</h1>]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>RL</tag>
      </tags>
  </entry>
  <entry>
    <title>Foreign publications reading--issue 1</title>
    <url>/2024/04/30/Foreign-publications-reading-issue-1/</url>
    <content><![CDATA[<h1 id="new-words-and-phrase"><a href="#new-words-and-phrase" class="headerlink" title="new words and phrase"></a>new words and phrase</h1><table>
<thead>
<tr>
<th align="center">Word</th>
<th align="center">Description</th>
<th align="center">Word</th>
<th align="center">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="center">chronicler</td>
<td align="center">a person who writes accounts of important or historical events.</td>
<td align="center">horror</td>
<td align="center">恐怖</td>
</tr>
<tr>
<td align="center">has made something of a name</td>
<td align="center">已名声大噪</td>
<td align="center">persuasive</td>
<td align="center">有说服力的</td>
</tr>
<tr>
<td align="center">apes</td>
<td align="center">类人猿</td>
<td align="center">iconography</td>
<td align="center">图像学</td>
</tr>
<tr>
<td align="center">apes the iconography of</td>
<td align="center">模仿…的形象</td>
<td align="center">dismal</td>
<td align="center">惨淡，悲凉</td>
</tr>
<tr>
<td align="center">tension</td>
<td align="center">紧张，张力</td>
<td align="center">conflict zone</td>
<td align="center">冲突区</td>
</tr>
<tr>
<td align="center">blockbuster</td>
<td align="center">重磅炸弹，大片</td>
<td align="center">theatre</td>
<td align="center">剧院</td>
</tr>
<tr>
<td align="center">teaser</td>
<td align="center">预告片</td>
<td align="center">liberal</td>
<td align="center">自由主义的</td>
</tr>
<tr>
<td align="center">conspiracy</td>
<td align="center">阴谋</td>
<td align="center">right-wing</td>
<td align="center">右翼</td>
</tr>
<tr>
<td align="center">deep state</td>
<td align="center">深层政府</td>
<td align="center">conspiracy theorists</td>
<td align="center">阴谋论者</td>
</tr>
<tr>
<td align="center">quartet</td>
<td align="center">四重奏</td>
<td align="center">quarter</td>
<td align="center">四等分，刻</td>
</tr>
<tr>
<td align="center">war correspondents</td>
<td align="center">战地记者</td>
<td align="center">rumored</td>
<td align="center">传闻</td>
</tr>
<tr>
<td align="center">secessionists</td>
<td align="center">分裂主义者</td>
<td align="center">trailer</td>
<td align="center">拖车，预告</td>
</tr>
<tr>
<td align="center">provocative</td>
<td align="center">挑衅，气人的</td>
<td align="center">ensue&#x2F;ensuing</td>
<td align="center">随后</td>
</tr>
<tr>
<td align="center">fluency</td>
<td align="center">流畅度</td>
<td align="center">suspense</td>
<td align="center">悬念</td>
</tr>
<tr>
<td align="center">genuine</td>
<td align="center">真正的</td>
<td align="center">genius</td>
<td align="center">天才</td>
</tr>
<tr>
<td align="center">protagonist</td>
<td align="center">主角</td>
<td align="center">philosophy&#x2F;philosophies</td>
<td align="center">哲学</td>
</tr>
<tr>
<td align="center">archetype</td>
<td align="center">原型</td>
<td align="center">old-school</td>
<td align="center">老派</td>
</tr>
<tr>
<td align="center">harden&#x2F;hardened</td>
<td align="center">硬化&#x2F;熟练的</td>
<td align="center">rookie</td>
<td align="center">新人</td>
</tr>
<tr>
<td align="center">be-all-end-all</td>
<td align="center">最重要的</td>
<td align="center">bear</td>
<td align="center">举止，仪态，忍受</td>
</tr>
<tr>
<td align="center">dwell</td>
<td align="center">居住</td>
<td align="center">dwell on</td>
<td align="center">详述</td>
</tr>
<tr>
<td align="center">auteur</td>
<td align="center">作者</td>
<td align="center">thumb</td>
<td align="center">拇指</td>
</tr>
<tr>
<td align="center">reckon</td>
<td align="center">估计，清算</td>
<td align="center">swagger</td>
<td align="center">昂首阔步</td>
</tr>
</tbody></table>
<h1 id="complex-sentences"><a href="#complex-sentences" class="headerlink" title="complex sentences"></a>complex sentences</h1><h2 id="sentence-1"><a href="#sentence-1" class="headerlink" title="sentence 1"></a>sentence 1</h2><p>Whether these scenarios are always persuasive is a separate question.<br>这些场景是否总是有说服力是一个单独的问题。</p>
<h2 id="sentence-2"><a href="#sentence-2" class="headerlink" title="sentence 2"></a>sentence 2</h2><p>apes the iconography of the Capitol riot to construct another dismal future—one in which tensions between the states have reduced the U.S. to a conflict zone.<br>模仿国会大厦骚乱的形象来构建另一个悲惨的未来——在这个未来中，各州之间的紧张关系使美国沦为冲突区。</p>
<h2 id="sentence-3"><a href="#sentence-3" class="headerlink" title="sentence 3"></a>sentence 3</h2><p>The blockbuster proved divisive long before it opened in theatres this week.<br>这部大片在本周上映之前很久就引起了分歧。</p>
<h2 id="sentence-4"><a href="#sentence-4" class="headerlink" title="sentence 4"></a>sentence 4</h2><p>The film itself—which follows a quartet of war correspondents who set out to reach D.C. in time for a rumored assault by secessionists—is as much of a Rorschach test as the trailer was.<br>影片本身讲述了四位战地记者及时赶赴华盛顿遭遇分离主义分子袭击的传闻，这部电影本身就像预告片一样是罗夏墨迹测试。</p>
<h2 id="sentence-5"><a href="#sentence-5" class="headerlink" title="sentence 5"></a>sentence 5</h2><p>For Lee, a hardened war photographer, simply bearing witness is the be-all-end-all.<br>对于一位经验丰富的战地摄影师李来说，仅仅见证就是最重要的。</p>
<h2 id="sentence-6"><a href="#sentence-6" class="headerlink" title="sentence 6"></a>sentence 6</h2><p>Garland, too, is more than ready to supply the images. But he’d rather not dwell on their implications.<br>加兰也已经准备好提供图像。 但他不想详述它们的含义。</p>
]]></content>
  </entry>
</search>
